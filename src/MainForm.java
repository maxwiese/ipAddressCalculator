
import java.net.*;
import java.util.logging.Level;
import java.util.logging.Logger;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author it11a_mahoelzle
 */
public class MainForm extends javax.swing.JFrame {

    /**
     * Creates new form MainForm
     */
    public MainForm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ipAddress = new javax.swing.JPanel();
        myIpSegment1I = new javax.swing.JTextField();
        myIpSegment2I = new javax.swing.JTextField();
        myIpSegment3I = new javax.swing.JTextField();
        myIpSegment4I = new javax.swing.JTextField();
        myAddress = new javax.swing.JLabel();
        myBinaryIpI = new javax.swing.JTextField();
        standartSubnetMask = new javax.swing.JPanel();
        standartSubnetMask1I = new javax.swing.JTextField();
        standartSubnetMask2I = new javax.swing.JTextField();
        standartSubnetMask3I = new javax.swing.JTextField();
        standartSubnetMask4I = new javax.swing.JTextField();
        standartSubnetMaskL = new javax.swing.JLabel();
        standardBinarySubI = new javax.swing.JTextField();
        isClass = new javax.swing.JPanel();
        isClassL = new javax.swing.JLabel();
        isClassI = new javax.swing.JTextField();
        hostsPerSubnet = new javax.swing.JPanel();
        hostsPerSubnetL = new javax.swing.JLabel();
        hostsPerSubnetI = new javax.swing.JTextField();
        subnets = new javax.swing.JPanel();
        subnetsL = new javax.swing.JLabel();
        subnetsI = new javax.swing.JTextField();
        subnetbits = new javax.swing.JPanel();
        subnetbitsL = new javax.swing.JLabel();
        subnetbitsI = new javax.swing.JTextField();
        subnetMask = new javax.swing.JPanel();
        mySubMaskSegment1I = new javax.swing.JTextField();
        mySubMaskSegment2I = new javax.swing.JTextField();
        mySubMaskSegment3I = new javax.swing.JTextField();
        mySubMaskSegment4I = new javax.swing.JTextField();
        mySubMaskL = new javax.swing.JLabel();
        myBinarySubnetI = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        myIpSegment1I.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        myIpSegment1I.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                myIpSegment1IActionPerformed(evt);
            }
        });
        myIpSegment1I.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                changedIpAddress(evt);
            }
        });

        myIpSegment2I.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        myIpSegment2I.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                changedIpAddress(evt);
            }
        });

        myIpSegment3I.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        myIpSegment3I.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                changedIpAddress(evt);
            }
        });

        myIpSegment4I.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        myIpSegment4I.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                changedIpAddress(evt);
            }
        });

        myAddress.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        myAddress.setText("IP-Adresse");

        myBinaryIpI.setEditable(false);
        myBinaryIpI.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        myBinaryIpI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                myBinaryIpIActionPerformed(evt);
            }
        });
        myBinaryIpI.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                myBinaryIpIchangedIpAddress(evt);
            }
        });

        javax.swing.GroupLayout ipAddressLayout = new javax.swing.GroupLayout(ipAddress);
        ipAddress.setLayout(ipAddressLayout);
        ipAddressLayout.setHorizontalGroup(
            ipAddressLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ipAddressLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ipAddressLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(myBinaryIpI)
                    .addGroup(ipAddressLayout.createSequentialGroup()
                        .addGroup(ipAddressLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(ipAddressLayout.createSequentialGroup()
                                .addComponent(myIpSegment1I, javax.swing.GroupLayout.DEFAULT_SIZE, 95, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(myIpSegment2I, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(myIpSegment3I, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(myIpSegment4I, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(myAddress))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        ipAddressLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {myIpSegment1I, myIpSegment2I, myIpSegment3I, myIpSegment4I});

        ipAddressLayout.setVerticalGroup(
            ipAddressLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ipAddressLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(myAddress)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(ipAddressLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(myIpSegment1I, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(myIpSegment2I, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(myIpSegment3I, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(myIpSegment4I, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(myBinaryIpI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(133, 133, 133))
        );

        ipAddressLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {myIpSegment1I, myIpSegment2I, myIpSegment3I, myIpSegment4I});

        myIpSegment1I.getAccessibleContext().setAccessibleName("myIpSegment1I");
        myIpSegment2I.getAccessibleContext().setAccessibleName("myIpSegment2I");
        myIpSegment3I.getAccessibleContext().setAccessibleName("myIpSegment3I");
        myIpSegment4I.getAccessibleContext().setAccessibleName("myIpSegment4I");
        myAddress.getAccessibleContext().setAccessibleName("myIpL");

        standartSubnetMask1I.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        standartSubnetMask1I.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                standartSubnetMask1IActionPerformed(evt);
            }
        });
        standartSubnetMask1I.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                changeStandardSubnetMask(evt);
            }
        });

        standartSubnetMask2I.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        standartSubnetMask2I.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                changeStandardSubnetMask(evt);
            }
        });

        standartSubnetMask3I.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        standartSubnetMask3I.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                changeStandardSubnetMask(evt);
            }
        });

        standartSubnetMask4I.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        standartSubnetMask4I.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                changeStandardSubnetMask(evt);
            }
        });

        standartSubnetMaskL.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        standartSubnetMaskL.setText("Standart Subnet-Maske");

        standardBinarySubI.setEditable(false);
        standardBinarySubI.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        standardBinarySubI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                standardBinarySubIActionPerformed(evt);
            }
        });
        standardBinarySubI.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                standardBinarySubIchangedIpAddress(evt);
            }
        });

        javax.swing.GroupLayout standartSubnetMaskLayout = new javax.swing.GroupLayout(standartSubnetMask);
        standartSubnetMask.setLayout(standartSubnetMaskLayout);
        standartSubnetMaskLayout.setHorizontalGroup(
            standartSubnetMaskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(standartSubnetMaskLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(standartSubnetMaskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(standardBinarySubI)
                    .addGroup(standartSubnetMaskLayout.createSequentialGroup()
                        .addGroup(standartSubnetMaskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(standartSubnetMaskL)
                            .addGroup(standartSubnetMaskLayout.createSequentialGroup()
                                .addComponent(standartSubnetMask1I, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(standartSubnetMask2I, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(standartSubnetMask3I, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(standartSubnetMask4I, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        standartSubnetMaskLayout.setVerticalGroup(
            standartSubnetMaskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(standartSubnetMaskLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(standartSubnetMaskL)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(standartSubnetMaskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(standartSubnetMask1I, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(standartSubnetMask3I, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(standartSubnetMask4I, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(standartSubnetMask2I, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                .addComponent(standardBinarySubI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        standartSubnetMaskLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {standartSubnetMask1I, standartSubnetMask2I, standartSubnetMask3I, standartSubnetMask4I});

        isClassL.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        isClassL.setText("Klassse");

        isClassI.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        isClassI.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                isClassIKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout isClassLayout = new javax.swing.GroupLayout(isClass);
        isClass.setLayout(isClassLayout);
        isClassLayout.setHorizontalGroup(
            isClassLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(isClassLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(isClassLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(isClassL)
                    .addComponent(isClassI, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(195, Short.MAX_VALUE))
        );
        isClassLayout.setVerticalGroup(
            isClassLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(isClassLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(isClassL)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(isClassI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        hostsPerSubnetL.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        hostsPerSubnetL.setText("Hosts per Subnetz");

        hostsPerSubnetI.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        hostsPerSubnetI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hostsPerSubnetIActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout hostsPerSubnetLayout = new javax.swing.GroupLayout(hostsPerSubnet);
        hostsPerSubnet.setLayout(hostsPerSubnetLayout);
        hostsPerSubnetLayout.setHorizontalGroup(
            hostsPerSubnetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(hostsPerSubnetLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(hostsPerSubnetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(hostsPerSubnetL)
                    .addComponent(hostsPerSubnetI, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(195, Short.MAX_VALUE))
        );
        hostsPerSubnetLayout.setVerticalGroup(
            hostsPerSubnetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(hostsPerSubnetLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(hostsPerSubnetL)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(hostsPerSubnetI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        subnetsL.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        subnetsL.setText("Subnetze");

        subnetsI.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N

        javax.swing.GroupLayout subnetsLayout = new javax.swing.GroupLayout(subnets);
        subnets.setLayout(subnetsLayout);
        subnetsLayout.setHorizontalGroup(
            subnetsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(subnetsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(subnetsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(subnetsL)
                    .addComponent(subnetsI, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(195, Short.MAX_VALUE))
        );
        subnetsLayout.setVerticalGroup(
            subnetsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(subnetsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(subnetsL)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(subnetsI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        subnetbitsL.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        subnetbitsL.setText("Benötigte Subnet Bits");

        subnetbitsI.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        subnetbitsI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subnetbitsIActionPerformed(evt);
            }
        });
        subnetbitsI.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                subnetbitsIPropertyChange(evt);
            }
        });
        subnetbitsI.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                subnetbitsIKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout subnetbitsLayout = new javax.swing.GroupLayout(subnetbits);
        subnetbits.setLayout(subnetbitsLayout);
        subnetbitsLayout.setHorizontalGroup(
            subnetbitsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(subnetbitsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(subnetbitsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(subnetbitsI, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(subnetbitsL))
                .addContainerGap(195, Short.MAX_VALUE))
        );
        subnetbitsLayout.setVerticalGroup(
            subnetbitsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(subnetbitsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(subnetbitsL)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(subnetbitsI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        mySubMaskSegment1I.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        mySubMaskSegment1I.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mySubMaskSegment1IActionPerformed(evt);
            }
        });

        mySubMaskSegment2I.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N

        mySubMaskSegment3I.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N

        mySubMaskSegment4I.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N

        mySubMaskL.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        mySubMaskL.setText("Subnet-Maske");

        myBinarySubnetI.setEditable(false);
        myBinarySubnetI.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        myBinarySubnetI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                myBinarySubnetIActionPerformed(evt);
            }
        });
        myBinarySubnetI.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                myBinarySubnetIchangedIpAddress(evt);
            }
        });

        javax.swing.GroupLayout subnetMaskLayout = new javax.swing.GroupLayout(subnetMask);
        subnetMask.setLayout(subnetMaskLayout);
        subnetMaskLayout.setHorizontalGroup(
            subnetMaskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(subnetMaskLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(subnetMaskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(myBinarySubnetI)
                    .addGroup(subnetMaskLayout.createSequentialGroup()
                        .addComponent(mySubMaskSegment1I)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(mySubMaskSegment2I, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(mySubMaskSegment3I, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(mySubMaskSegment4I, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(mySubMaskL))
                .addContainerGap())
        );
        subnetMaskLayout.setVerticalGroup(
            subnetMaskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(subnetMaskLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mySubMaskL)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(subnetMaskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mySubMaskSegment1I, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mySubMaskSegment2I, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mySubMaskSegment3I, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mySubMaskSegment4I, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                .addComponent(myBinarySubnetI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        mySubMaskSegment1I.getAccessibleContext().setAccessibleName("mySubMaskSegment1I");
        mySubMaskSegment2I.getAccessibleContext().setAccessibleName("mySubMaskSegment2I");
        mySubMaskSegment3I.getAccessibleContext().setAccessibleName("mySubMaskSegment3I");
        mySubMaskSegment4I.getAccessibleContext().setAccessibleName("mySubMaskSegment4I");
        mySubMaskL.getAccessibleContext().setAccessibleName("mySubMaskL");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(subnetMask, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(standartSubnetMask, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(isClass, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ipAddress, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(subnetbits, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(subnets, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(hostsPerSubnet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(159, 159, 159))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(ipAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(subnetMask, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(standartSubnetMask, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(isClass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(hostsPerSubnet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(subnets, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(subnetbits, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(72, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void myIpSegment1IActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_myIpSegment1IActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_myIpSegment1IActionPerformed

    private void mySubMaskSegment1IActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mySubMaskSegment1IActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mySubMaskSegment1IActionPerformed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        //filling mi address with localhost address
        try {
            InetAddress localhost = InetAddress.getLocalHost();
            String[] address = HandlingIp.ipToString(localhost);
            String[] submask = HandlingIp.subBitsToString(HandlingIp.getSubnetBits(localhost));
            String[] ssnm = HandlingIp.toStandardSubnetMask(submask);
            String isClass = HandlingIp.getClass(localhost);
            int subnetBits = 5;
            int subnets = HandlingIp.subnetBitsToSubnets(subnetBits);
            int hosts = HandlingIp.getMaxHosts(HandlingIp.getHostBits(localhost, subnetBits));

            myBinaryIpI.setText(HandlingIp.toBinaryString(address));
            myBinarySubnetI.setText(HandlingIp.toBinaryString(submask));
            standardBinarySubI.setText(HandlingIp.toBinaryString(ssnm));

            myIpSegment1I.setText(address[0]);
            myIpSegment2I.setText(address[1]);
            myIpSegment3I.setText(address[2]);
            myIpSegment4I.setText(address[3]);

            mySubMaskSegment1I.setText(submask[0]);
            mySubMaskSegment2I.setText(submask[1]);
            mySubMaskSegment3I.setText(submask[2]);
            mySubMaskSegment4I.setText(submask[3]);

            standartSubnetMask1I.setText(ssnm[0]);
            standartSubnetMask2I.setText(ssnm[1]);
            standartSubnetMask3I.setText(ssnm[2]);
            standartSubnetMask4I.setText(ssnm[3]);

            isClassI.setText(isClass);

            subnetsI.setText(Integer.toString(subnets));
            subnetbitsI.setText(Integer.toString(subnetBits));
            hostsPerSubnetI.setText(Integer.toString(hosts));

        } catch (UnknownHostException ex) {
            System.out.println(ex);
        } catch (IndexOutOfBoundsException ey) {
            System.out.println(ey);
        } catch (SocketException ew) {

        } catch (Exception e) {

        }
    }//GEN-LAST:event_formWindowActivated

    private void standartSubnetMask1IActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_standartSubnetMask1IActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_standartSubnetMask1IActionPerformed

    private void subnetbitsIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subnetbitsIActionPerformed


    }//GEN-LAST:event_subnetbitsIActionPerformed

    private void subnetbitsIKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_subnetbitsIKeyTyped

    }//GEN-LAST:event_subnetbitsIKeyTyped

    private void hostsPerSubnetIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hostsPerSubnetIActionPerformed
        try {
            int hostPerSubnet = Integer.parseInt(hostsPerSubnetI.getText());
            String isClass = isClassI.getText();

            subnetbitsI.setText(Integer.toString(HandlingIp.hostsToMinimumHostBits(hostPerSubnet, isClass)));
            subnetsI.setText(Integer.toString(HandlingIp.subnetBitsToSubnets(HandlingIp.hostsToMinimumHostBits(hostPerSubnet, isClass))));

        } catch (Exception ex) {

        }
    }//GEN-LAST:event_hostsPerSubnetIActionPerformed

    private void isClassIKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_isClassIKeyReleased
        if (evt.getKeyCode() == 10) {
            String isClass = isClassI.getText();
            String[] ssnm = HandlingIp.getStandardSubnetMaskFromClass(isClass);
            String[] firstPrivateIp = HandlingIp.getFirstPrivateHostIp(isClass);

            myBinaryIpI.setText(HandlingIp.toBinaryString(firstPrivateIp));
            myBinarySubnetI.setText(HandlingIp.toBinaryString(ssnm));
            standardBinarySubI.setText(HandlingIp.toBinaryString(ssnm));

            standartSubnetMask1I.setText(ssnm[0]);
            standartSubnetMask2I.setText(ssnm[1]);
            standartSubnetMask3I.setText(ssnm[2]);
            standartSubnetMask4I.setText(ssnm[3]);

            mySubMaskSegment1I.setText(ssnm[0]);
            mySubMaskSegment2I.setText(ssnm[1]);
            mySubMaskSegment3I.setText(ssnm[2]);
            mySubMaskSegment4I.setText(ssnm[3]);

            myIpSegment1I.setText(firstPrivateIp[0]);
            myIpSegment2I.setText(firstPrivateIp[1]);
            myIpSegment3I.setText(firstPrivateIp[2]);
            myIpSegment4I.setText(firstPrivateIp[3]);
        }
    }//GEN-LAST:event_isClassIKeyReleased

    private void changedIpAddress(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_changedIpAddress
        if (evt.getKeyCode() == 10) {
            String ip_address = myIpSegment1I.getText() + "." + myIpSegment2I.getText() + "." + myIpSegment3I.getText() + "." + myIpSegment4I.getText();
            String isClass = HandlingIp.getClass(ip_address.split("\\."));
            String[] ssnm = HandlingIp.getStandardSubnetMaskFromClass(isClass);

            myBinaryIpI.setText(HandlingIp.toBinaryString(ip_address.split("\\.")));
            myBinarySubnetI.setText(HandlingIp.toBinaryString(ssnm));
            standardBinarySubI.setText(HandlingIp.toBinaryString(ssnm));

            standartSubnetMask1I.setText(ssnm[0]);
            standartSubnetMask2I.setText(ssnm[1]);
            standartSubnetMask3I.setText(ssnm[2]);
            standartSubnetMask4I.setText(ssnm[3]);

            mySubMaskSegment1I.setText(ssnm[0]);
            mySubMaskSegment2I.setText(ssnm[1]);
            mySubMaskSegment3I.setText(ssnm[2]);
            mySubMaskSegment4I.setText(ssnm[3]);

            isClassI.setText(isClass);
        }
    }//GEN-LAST:event_changedIpAddress

    private void changeStandardSubnetMask(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_changeStandardSubnetMask
        if (evt.getKeyCode() == 10) {
            String ssnm = standartSubnetMask1I.getText() + "." + standartSubnetMask2I.getText() + "." + standartSubnetMask3I.getText() + "." + standartSubnetMask4I.getText();
            String[] firstPrivateIp = HandlingIp.getFirstPrivateHostIp(ssnm.split("\\."));

            String isClass = HandlingIp.getClass(firstPrivateIp);

            myBinaryIpI.setText(HandlingIp.toBinaryString(firstPrivateIp));
            myBinarySubnetI.setText(HandlingIp.toBinaryString(ssnm.split("\\.")));
            standardBinarySubI.setText(HandlingIp.toBinaryString(ssnm.split("\\.")));

            mySubMaskSegment1I.setText(ssnm.split("\\.")[0]);
            mySubMaskSegment2I.setText(ssnm.split("\\.")[1]);
            mySubMaskSegment3I.setText(ssnm.split("\\.")[2]);
            mySubMaskSegment4I.setText(ssnm.split("\\.")[3]);

            isClassI.setText(isClass);

            myIpSegment1I.setText(firstPrivateIp[0]);
            myIpSegment2I.setText(firstPrivateIp[1]);
            myIpSegment3I.setText(firstPrivateIp[2]);
            myIpSegment4I.setText(firstPrivateIp[3]);
        }
    }//GEN-LAST:event_changeStandardSubnetMask

    private void myBinaryIpIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_myBinaryIpIActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_myBinaryIpIActionPerformed

    private void myBinaryIpIchangedIpAddress(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_myBinaryIpIchangedIpAddress
        // TODO add your handling code here:
    }//GEN-LAST:event_myBinaryIpIchangedIpAddress

    private void myBinarySubnetIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_myBinarySubnetIActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_myBinarySubnetIActionPerformed

    private void myBinarySubnetIchangedIpAddress(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_myBinarySubnetIchangedIpAddress
        // TODO add your handling code here:
    }//GEN-LAST:event_myBinarySubnetIchangedIpAddress

    private void standardBinarySubIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_standardBinarySubIActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_standardBinarySubIActionPerformed

    private void standardBinarySubIchangedIpAddress(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_standardBinarySubIchangedIpAddress
        // TODO add your handling code here:
    }//GEN-LAST:event_standardBinarySubIchangedIpAddress

    private void subnetbitsIPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_subnetbitsIPropertyChange
        try {
            int subBits = Integer.parseInt(subnetbitsI.getText());

            if (subBits < 1) {
                String isClass = isClassI.getText();
                if ("C".equals(isClass)) {
                    isClassI.setText("B");
                } else if ("B".equals(isClass)) {
                    isClassI.setText("A");
                } else {
                    System.out.println("");
                }

            }
        } catch (Exception e) {
            System.err.println(e);
        }

    }//GEN-LAST:event_subnetbitsIPropertyChange

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws UnknownHostException {

        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel hostsPerSubnet;
    private javax.swing.JTextField hostsPerSubnetI;
    private javax.swing.JLabel hostsPerSubnetL;
    private javax.swing.JPanel ipAddress;
    private javax.swing.JPanel isClass;
    private javax.swing.JTextField isClassI;
    private javax.swing.JLabel isClassL;
    private javax.swing.JLabel myAddress;
    private javax.swing.JTextField myBinaryIpI;
    private javax.swing.JTextField myBinarySubnetI;
    private javax.swing.JTextField myIpSegment1I;
    private javax.swing.JTextField myIpSegment2I;
    private javax.swing.JTextField myIpSegment3I;
    private javax.swing.JTextField myIpSegment4I;
    private javax.swing.JLabel mySubMaskL;
    private javax.swing.JTextField mySubMaskSegment1I;
    private javax.swing.JTextField mySubMaskSegment2I;
    private javax.swing.JTextField mySubMaskSegment3I;
    private javax.swing.JTextField mySubMaskSegment4I;
    private javax.swing.JTextField standardBinarySubI;
    private javax.swing.JPanel standartSubnetMask;
    private javax.swing.JTextField standartSubnetMask1I;
    private javax.swing.JTextField standartSubnetMask2I;
    private javax.swing.JTextField standartSubnetMask3I;
    private javax.swing.JTextField standartSubnetMask4I;
    private javax.swing.JLabel standartSubnetMaskL;
    private javax.swing.JPanel subnetMask;
    private javax.swing.JPanel subnetbits;
    private javax.swing.JTextField subnetbitsI;
    private javax.swing.JLabel subnetbitsL;
    private javax.swing.JPanel subnets;
    private javax.swing.JTextField subnetsI;
    private javax.swing.JLabel subnetsL;
    // End of variables declaration//GEN-END:variables
}
